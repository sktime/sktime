name: Build Wheels and Push to PyPI

on:
  release:
    types: [published]


jobs:
  build_unix_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-20.04, macOS-10.15]

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.3.1

      - name: Build and test wheels
        env:
          CIBW_BUILD_VERBOSITY: 1
          CIBW_SKIP: cp36-* pp* *-manylinux_i686 *-musllinux_i686 *-musllinux_x86_64
          CIBW_TEST_EXTRAS: "all_extras,dev"
          CIBW_ARCHS_MACOS: 'x86_64 arm64'
          CIBW_TEST_SKIP: '*-macosx_arm64'  # see https://cibuildwheel.readthedocs.io/en/stable/faq/#universal2
          CIBW_TEST_COMMAND: pytest --showlocals --durations=20 -n 2 --pyargs sktime
        run: bash build_tools/github/build_wheels.sh

      - name: Store wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: wheelhouse/*.whl

  build_windows_wheels:
    name: Build wheels on windows-2019
    runs-on: windows-2019

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.3.1

      - name: Fix windows paths
        run: echo "C:\Program Files (x86)\Windows Kits\10\bin\10.0.18362.0\x64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Build wheels
        env:
          CIBW_BUILD_VERBOSITY: 2
          CIBW_PLATFORM: windows
          CIBW_SKIP: cp36-* pp* *-win32
          CIBW_BUILD_FRONTEND: "build"
          # Windows causes install problems due to fbprophet so it's tested separately
        run: python -m cibuildwheel --platform windows --output-dir wheelhouse

      - name: Store wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: wheelhouse/*.whl

  test-windows-wheels:
    needs: build_windows_wheels
    name: Test windows wheels
    runs-on: windows-2019
    strategy:
      matrix:
        include:
          # Window 64 bit
          - os: windows-2019
            python: 37
            python-version: 3.7
            bitness: 64
            platform_id: win_amd64
          - os: windows-2019
            python: 38
            python-version: 3.8
            bitness: 64
            platform_id: win_amd64

    steps:
      - uses: actions/checkout@v2

      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: test
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          channels: anaconda, conda-forge,

      - run: conda --version
      - run: which python

      - uses: actions/download-artifact@v2
        with:
          name: wheels
          path: wheelhouse

      - name: Install conda libpython
        run: conda install -c anaconda -n test -y libpython

      - name: Install conda dependencies
        run: |
          conda install -c anaconda -n test -y "pystan==2.19.1.1"
          conda install -c conda-forge -n test -y "fbprophet>=0.7.1"
          conda install -c conda-forge -n test -y scipy matplotlib

      - name: Display downloaded artifacts
        run: ls -l wheelhouse

      - name: Get wheel filename
        run: echo "WHEELNAME=$(ls ./wheelhouse/sktime*-cp${{ matrix.python }}*-${{ matrix.platform_id }}*.whl)" >> $env:GITHUB_ENV

      - name: Activate conda env
        run: conda activate test

      - name: Install wheel and extras
        run: python -m pip install "${env:WHEELNAME}[all_extras,dev]"

      - name: Show conda packages
        run: conda list -n test

      - name: Run tests
        run: |
          mkdir -p testdir/
          cp .coveragerc testdir/
          cp setup.cfg testdir/
          cd testdir/
          python -m pytest --showlocals --durations=10 --cov-report=xml -n 2 --cov=sktime --pyargs sktime

  # Build the source distribution under Linux
  build_sdist:
    name: Source distribution
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Build source distribution
        run: |
          python -m pip install build
          python -m build --sdist --outdir wheelhouse

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: wheelhouse/*.tar.gz

  upload_wheels:
    name: Upload wheels to PyPi
    runs-on: ubuntu-latest
    needs: [build_unix_wheels,test-windows-wheels,build_sdist]

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
          path: wheelhouse

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: ${{ secrets.PYPI_USERNAME }}
          password: ${{ secrets.PYPI_PASSWORD }}
          packages_dir: wheelhouse/
