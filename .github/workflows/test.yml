name: Install and test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  code-quality:
    name: code-quality
    runs-on: ubuntu-latest
    steps:
      - name: repository checkout step
        uses: actions/checkout@v4

      - name: python environment step
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: install pre-commit
        run: python3 -m pip install pre-commit

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        run: |
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | tr '\n' ' ')
          echo "CHANGED_FILES=${CHANGED_FILES}" >> $GITHUB_ENV

      - name: Print changed files
        run: |
          echo "Changed files:" && echo "$CHANGED_FILES" | tr ' ' '\n'

      - name: Run pre-commit on changed files
        run: |
          if [ -n "$CHANGED_FILES" ]; then
            pre-commit run --color always --files $CHANGED_FILES --show-diff-on-failure
          else
            echo "No changed files to check."
          fi

      - name: check missing __init__ files

        run: build_tools/fail_on_missing_init_files.sh
        shell: bash

  run-notebook-examples:
    needs: code-quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install .[notebooks,binder,dev]

      - name: Show dependencies
        run: python -m pip list

      - name: Run example notebooks
        run: build_tools/run_examples.sh
        shell: bash

  run-blogpost-examples:
    needs: code-quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install .[notebooks,binder]

      - name: Show dependencies
        run: python -m pip list

      - name: Run example notebooks
        run: build_tools/run_blogposts.sh
        shell: bash

  detect-changed-classes:
    needs: code-quality
    runs-on: ubuntu-latest
    outputs:
      obj_list: ${{ steps.get-change-list.outputs.obj_list }}
      obj_list_length: ${{ steps.get-change-list.outputs.obj_list_length }}

    steps:
      - uses: actions/checkout@v4

      - run: git remote set-branches origin 'main'

      - run: git fetch --depth 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install sktime with dev dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install .[dev]

      - name: Get list of names of changed classes
        id: get-change-list
        run: |
          OBJ_LIST=$(python -c 'from sktime.tests.test_switch import _get_all_changed_classes; import json; obj_list = _get_all_changed_classes(vm=True); print(json.dumps(obj_list))')
          OBJ_LIST_LENGTH=$(python -c 'from sktime.tests.test_switch import _get_all_changed_classes; obj_list = _get_all_changed_classes(vm=True); print(len(obj_list))')
          echo "OBJ_LIST=$OBJ_LIST" >> $GITHUB_ENV
          echo "OBJ_LIST_LENGTH=$OBJ_LIST_LENGTH" >> $GITHUB_ENV
          echo "::set-output name=obj_list::$OBJ_LIST"
          echo "::set-output name=obj_list_length::$OBJ_LIST_LENGTH"

      - name: Print changed classes
        run: |
          echo "Number of changed classes: $OBJ_LIST_LENGTH"
          echo "Changed classes: $OBJ_LIST"

  test-est:
    needs: detect-changed-classes
    if: ${{ needs.detect-changed-classes.outputs.obj_list != '[]' }}

    strategy:
      fail-fast: false
      matrix:
        flag: ${{ fromJson(needs.detect-changed-classes.outputs.obj_list) }}
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
        os: [ubuntu-latest, macos-13, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install OSX packages
        run: ./.github/scripts/install_osx_dependencies.sh

      - name: Install sktime with dev dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install .[dev]

      - name: Install dependencies for ${{ matrix.flag }}
        run: |
          python -c "from sktime.registry import deps; print('\n'.join(deps('${{ matrix.flag }}')))" > deps.txt
          pip install -r deps.txt
        continue-on-error: true

      - name: Show dependencies
        run: python -m pip list

      - name: Run tests with ${{ matrix.flag }}
        env:
          FLAG: ${{ matrix.flag }}
        shell: bash
        run: python -c "from sktime.tests._test_vm import run_test_vm; run_test_vm('${{ matrix.flag }}')"

  detect-package-change:
    needs: [code-quality, detect-changed-classes]
    name: detect package changes
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      sktime: ${{ steps.check.outputs.sktime }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed to access the full git history

      - name: Fetch main branch
        run: git fetch origin main

      - name: Check if sktime or pyproject.toml changed
        id: check
        run: |
          if git diff --quiet origin/main -- sktime/ pyproject.toml; then
            echo "No sktime-related changes"
            echo "sktime=false" >> $GITHUB_OUTPUT
          else
            echo "Detected changes in sktime"
            echo "sktime=true" >> $GITHUB_OUTPUT
          fi

  test-nodevdeps:
    needs: detect-package-change
    if: ${{ needs.detect-package-change.outputs.sktime == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install sktime and dependencies
        run: |
          python -m pip install .

      - name: Run pytest-free tests
        run: |
          python sktime/_nopytest_tests.py

  test-nosoftdeps:
    needs: detect-package-change
    if: ${{ needs.detect-package-change.outputs.sktime == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install sktime and dependencies
        run: |
          python -m pip install .[dev]

      - name: Show dependencies
        run: python -m pip list

      - name: Run tests
        run: make test_softdeps

  test-nosoftdeps-full:
    needs: test-nosoftdeps
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - run: git remote set-branches origin 'main'

      - run: git fetch --depth 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install sktime and dependencies
        run: |
          python -m pip install .[dev]

      - name: Show dependencies
        run: python -m pip list

      - name: Run tests
        run: make PYTESTOPTIONS="--matrixdesign=False --timeout=600" test_softdeps_full

  test-mlflow:
    needs: detect-package-change
    if: ${{ needs.detect-package-change.outputs.sktime == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        mlflow-version: ['2.9.2', '3.latest']
    name: test-mlflow-${{ matrix.mlflow-version }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install sktime and dependencies
        run: |
          if [[ "${{ matrix.mlflow-version }}" == "2.9.2'" ]]; then
            python -m pip install .[all_extras,dev,mlflow_tests,mlflow2] --no-cache-dir
          else
            python -m pip install .[all_extras,dev,mlflow_tests] --no-cache-dir
          fi

      - name: Show dependencies
        run: python -m pip list

      - name: Run tests
        run: make test_mlflow

  test-cython-estimators:
    needs: test-nosoftdeps
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4

      - run: git remote set-branches origin 'main'

      - run: git fetch --depth 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install OSX packages
        shell: bash
        run: ./.github/scripts/install_osx_dependencies.sh

      - name: Install sktime and dependencies
        run: |
          python -m pip install .[dev,cython_extras] --no-cache-dir

      - name: Show dependencies
        run: python -m pip list

      - name: Run tests
        run: make PYTESTOPTIONS="--only_cython_estimators=True --matrixdesign=False --timeout=600" test_check_suite

  test-lowerdeps:
    needs: test-nosoftdeps
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - run: git remote set-branches origin 'main'

      - run: git fetch --depth 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install sktime and dependencies
        run: |
          python -m pip install .[dev,dependencies_lower]

      - name: Show dependencies
        run: python -m pip list

      - name: Run tests
        run: make PYTESTOPTIONS="--matrixdesign=False --timeout=600" test_softdeps_full

  detect:
    needs: test-nosoftdeps
    name: detect changes
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      datasets: ${{ steps.filter.outputs.datasets }}
      pyproject: ${{ steps.filter.outputs.pyproject }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            datasets:
              - sktime/base/**
              - sktime/datasets/**
            pyproject:
              - pyproject.toml

  test-base:
    needs: test-nosoftdeps
    name: base
    uses: ./.github/workflows/test_base.yml
    secrets: inherit

  test-module:
    needs: test-nosoftdeps
    name: module
    uses: ./.github/workflows/test_module.yml
    secrets: inherit

  test-other:
    needs: test-nosoftdeps
    name: other
    uses: ./.github/workflows/test_other.yml
    secrets: inherit

  test-datasets:
    needs: detect
    name: datasets
    if: ${{ needs.detect.outputs.datasets == 'true' }}
    uses: ./.github/workflows/test_datasets.yml
    secrets: inherit

  test-full:
    needs: test-nosoftdeps

    strategy:
      fail-fast: false  # to not fail all combinations if just one fail
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        os: [ubuntu-latest, macos-13, windows-latest, ubuntu-22.04-arm]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - run: git remote set-branches origin 'main'

      - run: git fetch --depth 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install OSX packages
        run: ./.github/scripts/install_osx_dependencies.sh

      - name: Install sktime and dependencies
        shell: bash
        run: python -m pip install .[all_extras_pandas2,dev,dl,compatibility_tests] --no-cache-dir

      - name: Show dependencies
        run: python -m pip list

      - name: Show available branches
        run: git branch -a

      - name: Run tests
        run: make test_without_datasets

  test-unix-pandas1:
    needs: test-nosoftdeps
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - run: git remote set-branches origin 'main'

      - run: git fetch --depth 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install sktime and dependencies
        run: |
          python -m pip install .[all_extras,dev,pandas1,numpy1] --no-cache-dir

      - name: Show dependencies
        run: python -m pip list

      - name: Show available branches
        run: git branch -a

      - name: Run tests
        run: make test_without_datasets
