[project]
name = "sktime"
version = "0.35.0"
description = "A unified framework for machine learning with time series"
readme = "README.md"
keywords = [
  "data-mining",
  "data-science",
  "forecasting",
  "machine-learning",
  "scikit-learn",
  "time-series",
  "time-series-analysis",
  "time-series-classification",
  "time-series-regression",
]
license = { file = "LICENSE" }
# sktime is governed by the Community Council, see docs/source/get_involved/governance
# use the email or sktime discord (governance channel) to get in touch
maintainers = [
  { name = "sktime developers", email = "sktime.toolbox@gmail.com" },
  { name = "Felix Hirwa Nshuti" },
  { name = "Franz KirÃ¡ly" },
  { name = "Marc Rovira" },
  { name = "Ugochukwu Onyeka" },
]
# sktime has a large number of contributors,
# for full credits see contributors.md
authors = [
    { name = "sktime developers", email = "sktime.toolbox@gmail.com" },
]
requires-python = ">=3.9,<3.14"
classifiers = [
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: BSD License",
  "Operating System :: MacOS",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX",
  "Operating System :: Unix",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering",
  "Topic :: Software Development",
]
# core dependencies of sktime
# this set should be kept minimal!
dependencies = [
  "joblib<1.5,>=1.2.0",  # required for parallel processing
  "numpy<2.2,>=1.21",  # required for framework layer and base class logic
  "packaging",  # for estimator specific dependency parsing
  "pandas<2.3.0,>=1.1",  # pandas is the main in-memory data container
  "scikit-base>=0.6.1,<0.13.0",  # base module for sklearn compatible base API
  "scikit-learn>=0.24,<1.6.0",  # required for estimators and framework layer
  "scipy<2.0.0,>=1.2",  # required for estimators and framework layer
]

[project.optional-dependencies]
# there are the following dependency sets:
# - all_extras_pandas2, all_extras - all soft dependencies
# - single-task soft dependencies, e.g., forecasting, classification, etc.
# - dev - the developer dependency set, for contributors to sktime
# - CI related, e.g., binder, docs, tests. Not for users of sktime.
#
# soft dependencies are not required for the core functionality of sktime
# but are required by popular estimators, e.g., prophet, tbats, etc.

# all soft dependencies
#
# users can install via "pip install sktime[all_extras]"
# or "pip install sktime[all_extras_pandas2]", to install only pandas 2 compatible deps
#
all_extras = [
  'arch>=5.6,<7.1.0; python_version < "3.13"',
  'autots<0.7,>=0.6.1',
  'cloudpickle; python_version < "3.13"',
  'dash!=2.9.0; python_version < "3.13"',
  "dask<2024.8.1; extra == 'dataframe'",
  'dtaidistance<2.4; python_version < "3.13"',
  'dtw-python; python_version < "3.13"',
  'esig==0.9.7; python_version < "3.10"',
  'filterpy>=1.4.5; python_version < "3.11"',
  'gluonts>=0.9; python_version < "3.13"',
  'h5py; python_version < "3.12"',
  'hmmlearn>=0.2.7; python_version < "3.11"',
  'holidays; python_version < "3.13"',
  'keras-self-attention; python_version < "3.11"',
  'matplotlib!=3.9.1,>=3.3.2; python_version < "3.13"',
  'mne; python_version < "3.13"',
  'numba<0.61,>=0.53; python_version < "3.13"',
  'optuna<4.2',
  'pmdarima!=1.8.1,<3.0.0,>=1.8; python_version < "3.12"',
  'polars[pandas]>=0.20,<2.0; python_version < "3.13"',
  'prophet>=1.1; python_version < "3.12"',
  'pycatch22<0.4.6; python_version < "3.13"',
  'pyod>=0.8; python_version < "3.11"',
  "pyts<0.14.0; python_version < '3.12'",
  'scikit-optimize; python_version < "3.13"',
  'scikit_posthocs>=0.6.5; python_version < "3.13"',
  'seaborn>=0.11; python_version < "3.13"',
  'seasonal; python_version < "3.13"',
  'skforecast<0.14,>=0.12.1; python_version < "3.13"',
  "skpro>=2,<2.9.0",
  'statsforecast<1.8.0,>=1.0.0; python_version < "3.12"',
  'statsmodels>=0.12.1; python_version < "3.13"',
  'stumpy>=1.5.1; python_version < "3.11"',
  'tbats>=1.1; python_version < "3.12"',
  'temporian<0.9.0,>=0.7.0,!=0.8.0; python_version < "3.12" and sys_platform != "win32"',
  'tensorflow<2.17,>=2; python_version < "3.12"',
  'tsfresh>=0.17; python_version < "3.12"',
  'tslearn<0.7.0,!=0.6.0,>=0.5.2; python_version < "3.11"',
  'u8darts>=0.29.0,<0.32.0; python_version < "3.13"',
  'xarray; python_version < "3.13"',
]

# all soft dependencies compatible with pandas 2
all_extras_pandas2 = [
  'arch>=5.6,<7.1.0; python_version < "3.13"',
  'autots<0.7,>=0.6.1; python_version < "3.13"',
  'cloudpickle; python_version < "3.13"',
  'dash!=2.9.0; python_version < "3.13"',
  "dask<2024.11.3; extra == 'dataframe'",
  'dtaidistance<2.4; python_version < "3.13"',
  'dtw-python; python_version < "3.13"',
  'esig==0.9.7; python_version < "3.10"',
  'filterpy>=1.4.5; python_version < "3.11"',
  'gluonts>=0.9; python_version < "3.13"',
  'h5py; python_version < "3.12"',
  'hmmlearn>=0.2.7; python_version < "3.11"',
  'holidays; python_version < "3.13"',
  'keras-self-attention; python_version < "3.11"',
  'matplotlib!=3.9.1,>=3.3.2; python_version < "3.13"',
  'mne; python_version < "3.13"',
  'numba<0.61,>=0.53; python_version < "3.13"',
  'optuna<4.2',
  'pmdarima!=1.8.1,<3.0.0,>=1.8; python_version < "3.12"',
  'polars[pandas]>=0.20,<2.0; python_version < "3.13"',
  'prophet>=1.1; python_version < "3.12"',
  'pycatch22<0.4.6; python_version < "3.13"',
  'pyod>=0.8; python_version < "3.11"',
  'scikit_posthocs>=0.6.5; python_version < "3.13"',
  'seaborn>=0.11; python_version < "3.13"',
  'seasonal; python_version < "3.13"',
  'skforecast<0.14,>=0.12.1; python_version < "3.13"',
  'skpro>=2,<2.9.0',
  'statsforecast<1.8.0,>=1.0.0; python_version < "3.12"',
  'statsmodels>=0.12.1; python_version < "3.13"',
  'stumpy>=1.5.1; python_version < "3.11"',
  'tbats>=1.1; python_version < "3.12"',
  'temporian<0.9.0,>=0.7.0,!=0.8.0; python_version < "3.12" and sys_platform != "win32"',
  'tensorflow<2.17,>=2; python_version < "3.12"',
  'tsbootstrap<0.2,>=0.1.0; python_version < "3.13"',
  'tsfresh>=0.17; python_version < "3.12"',
  'tslearn<0.7.0,!=0.6.0,>=0.5.2; python_version < "3.11"',
  'u8darts>=0.29.0,<0.32.0; python_version < "3.13"',
  'xarray; python_version < "3.13"',
]

# single-task dependencies, e.g., forecasting, classification, etc.
# manually curated and intentionally smaller to avoid dependency conflicts
# names are identical with the names of the modules and estimator type strings
# dependency sets are selected to cover the most popular estimators in each module
# (this is a subjective choice, and may change over time as the ecosystem evolves,
# removals are rare and always accompanied by a deprecation warning)
#
# users can install via "pip install sktime[forecasting,transformations]" etc
#
alignment = [
  'dtaidistance<2.4; python_version < "3.13"',
  'dtw-python>=1.3,<1.6; python_version < "3.13"',
  'numba<0.61,>=0.53; python_version < "3.13"',
]
annotation = [
  'hmmlearn<0.4,>=0.2.7; python_version < "3.13"',
  'numba<0.61,>=0.53; python_version < "3.13"',
  'pyod<1.2,>=0.8; python_version < "3.12"',
]
classification = [
  'esig<0.10,>=0.9.7; python_version < "3.11"',
  'numba<0.61,>=0.53; python_version < "3.13"',
  'tensorflow<2.17,>=2; python_version < "3.12"',
  'tsfresh<0.21,>=0.17; python_version < "3.12"',
]
clustering = [
  'numba<0.61,>=0.53; python_version < "3.13"',
  'tslearn<0.7.0,!=0.6.0,>=0.5.2; python_version < "3.12"',
]
detection = [
  'hmmlearn<0.4,>=0.2.7; python_version < "3.13"',
  'numba<0.61,>=0.53; python_version < "3.13"',
  'pyod<1.2,>=0.8; python_version < "3.12"',
]
forecasting = [
  'arch>=5.6,<7.1; python_version < "3.13"',
  'autots<0.7,>=0.6.1; python_version < "3.13"',
  'pmdarima!=1.8.1,<2.1,>=1.8; python_version < "3.12"',
  'prophet<1.2,>=1.1; python_version < "3.13"',
  'skforecast<0.14,>=0.12.1; python_version < "3.13"',
  "skpro>=2,<2.9.0",
  'statsforecast<1.8.0,>=1.0.0; python_version < "3.12"',
  'statsmodels<0.15,>=0.12.1; python_version < "3.13"',
  'tbats<1.2,>=1.1; python_version < "3.12"',
]
networks = [
  'keras-self-attention<0.52,>=0.51; python_version < "3.13"',
  'tensorflow<2.17,>=2; python_version < "3.12"',
]
param_est = [
  'seasonal<0.4,>=0.3.1; python_version < "3.13"',
  'statsmodels<0.15,>=0.12.1; python_version < "3.13"',
]
regression = [
  'numba<0.61,>=0.53; python_version < "3.13"',
  'tensorflow<2.17,>=2; python_version < "3.12"',
]
transformations = [
  'esig<0.10,>=0.9.7; python_version < "3.11"',
  'filterpy<1.5,>=1.4.5; python_version < "3.13"',
  'holidays>=0.29,<0.59; python_version < "3.13"',
  'mne>=1.5,<1.9; python_version < "3.13"',
  'numba<0.61,>=0.53; python_version < "3.13"',
  'pycatch22>=0.4,<0.4.6; python_version < "3.13"',
  'statsmodels<0.15,>=0.12.1; python_version < "3.13"',
  'stumpy<1.13,>=1.5.1; python_version < "3.12"',
  'temporian<0.9.0,>=0.7.0,!=0.8.0; python_version < "3.12" and sys_platform != "win32"',
  'tsfresh<0.21,>=0.17; python_version < "3.12"',
]

# dev - the developer dependency set, for contributors to sktime
dev = [
  "backoff",
  "httpx",
  "pre-commit",
  "pytest",
  "pytest-randomly",
  "pytest-timeout",
  "pytest-xdist",
  "wheel",
]

# CI related soft dependency sets - not for users of sktime, only for developers
# docs and tests are standard dep sets for development use
# they are stable and subject to deprecation policies
# contributors should use the dev dependency set for contributing to sktime, see above
docs = [
  "jupyter",
  "myst-parser",
  "nbsphinx>=0.8.6",
  "numpydoc",
  "pydata-sphinx-theme",
  "Sphinx!=7.2.0,<9.0.0",
  "sphinx-copybutton",
  "sphinx-design<0.7.0",
  "sphinx-gallery<0.19.0",
  "sphinx-issues<6.0.0",
  "tabulate",
]
tests = [
  "pytest>=7.4,<8.4",
  "pytest-randomly>=3.15,<3.17",
  "pytest-timeout>=2.1,<2.4",
  "pytest-xdist>=3.3,<3.7",
]

# CI related soft dependency sets - not for users of sktime, only for developers
# these are for specual uses and may be changed or removed at any time
binder = [
  "jupyter",
  "pandas<2.0.0",
  "skchange",
]
cython_extras = [
  "mrseql < 0.0.3",
  'mrsqm; python_version < "3.11"',
  "numba<0.61",
]
datasets = [
  "rdata",
  "requests",
]
dl = [
  'FrEIA; python_version < "3.12"',
  'neuralforecast<1.8.0,>=1.6.4; python_version < "3.11"',
  'peft>=0.10.0,<0.14.0; python_version < "3.12"',
  'tensorflow<2.17,>=2; python_version < "3.12"',
  'torch; python_version < "3.12"',
  'transformers[torch]<4.41.0; python_version < "3.12"',
  'pykan>=0.2.1,<0.2.7; python_version > "3.9.7"',
  'pytorch-forecasting>=1.0.0,<1.2.0; python_version < "3.13"',
  'lightning>=2.0; python_version < "3.12"',
  'gluonts>=0.14.3; python_version < "3.12"',
  'einops>0.7.0; python_version < "3.12"',
  'huggingface-hub>=0.23.0; python_version < "3.12"',
  'hydra-core; python_version < "3.13"',
]
mlflow = [
  "mlflow",
]
mlflow_tests = [
  "boto3",
  "botocore",
  "mlflow",
  "moto",
]
numpy1 = [
  "numpy<2.0.0",
]
pandas1 = [
  "pandas<2.0.0",
]
compatibility_tests = [
  'catboost; python_version < "3.13"',
]

[project.urls]
"API Reference" = "https://www.sktime.net/en/stable/api_reference.html"
Documentation = "https://www.sktime.net"
Download = "https://pypi.org/project/sktime/#files"
Homepage = "https://www.sktime.net"
"Release Notes" = "https://www.sktime.net/en/stable/changelog.html"
Repository = "https://github.com/sktime/sktime"

[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>61",
]

[tool.setuptools.package-data]
sktime = [
  "utils/_estimator_html_repr.css",
  "*.csv",
  "*.csv.gz",
  "*.arff",
  "*.arff.gz",
  "*.txt",
  "*.ts",
  "*.tsv",
]

[tool.setuptools.packages.find]
exclude = ["tests", "tests.*"]

[tool.ruff]
line-length = 88
exclude = [".git", "sktime/_contrib/*", "examples/blog_posts/*"]
target-version = "py39"
extend-include = ["*.ipynb"]

[tool.ruff.lint]
select = [
  # https://pypi.org/project/pycodestyle
  "D",
  "E",
  "W",
  # https://pypi.org/project/pyflakes
  "F",
  # https://pypi.org/project/flake8-bandit
  "S",
  # https://docs.astral.sh/ruff/rules/#pyupgrade-up
  "UP",
  "I002",    # Missing required imports
  "UP008",   # Super calls with redundant arguments passed.
  "G010",    # Deprecated log warn.
  "PLR1722", # Use sys.exit() instead of exit() and quit().
  "PT014",   # pytest-duplicate-parametrize-test-cases.
  "PT006",   # Checks for the type of parameter names passed to pytest.mark.parametrize.
  "PT007",   # Checks for the type of parameter values passed to pytest.mark.parametrize.
  "PT018",   # Checks for assertions that combine multiple independent condition
  "RUF001", # Checks for non unicode string literals
  "RUF002", # Checks for non unicode string literals
  "RUF003", # Checks for non unicode string literals
]
extend-select = [
  "I", # isort
  "C4", # https://pypi.org/project/flake8-comprehensions
]
ignore=[
  "E203", # Whitespace-before-punctuation.
  "E402", # Module-import-not-at-top-of-file.
  "E731", # Do not assign a lambda expression, use a def.
  "RET504", # Unnecessary variable assignment before `return` statement.
  "S101", # Use of `assert` detected.
  "RUF100", # https://docs.astral.sh/ruff/rules/unused-noqa/
  "C408", # Unnecessary dict call - rewrite as a literal.
  "UP031", # Use format specifier instead of %
  "S102", # Use of excec
  "C414", # Unnecessary `list` call within `sorted()`
  "S301", # pickle and modules that wrap it can be unsafe
  "C416", # Unnecessary list comprehension - rewrite as a generator
  "S310", # Audit URL open for permitted schemes
  "S202", # Uses of `tarfile.extractall()`
  "S307", # Use of possibly insecure function
  "C417", # Unnecessary `map` usage (rewrite using a generator expression)
  "S605", # Starting a process with a shell, possible injection detected
  "E741", # Ambiguous variable name
  "S107", # Possible hardcoded password
  "S105", # Possible hardcoded password
  "PT018", # Checks for assertions that combine multiple independent condition
  "S602", # sub process call with shell=True unsafe
  "C419", # Unnecessary list comprehension, some are flagged yet are not
  "C409", # Unnecessary `list` literal passed to `tuple()` (rewrite as a `tuple` literal)
  "S113", # Probable use of httpx call withour timeout
]
allowed-confusables=["Ï"]

[tool.ruff.lint.per-file-ignores]

"setup.py" = ["S101"]
"**/__init__.py" = [
  "F401", # unused import
]
"**/tests/**" = [
  "D",
  "S605",  # Starting a process with a shell: seems safe, but may be changed in the future; consider rewriting without `shell`
  "S607",  # Starting a process with a partial executable path
  "RET504",  # todo:Unnecessary variable assignment before `return` statement
  "PT004",  # Fixture `tmpdir_unittest_fixture` does not return anything, add leading underscore
  "PT011",  # `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception
  "PT012",  # `pytest.raises()` block should contain a single simple statement
  "PT019",  # Fixture `_` without value is injected as parameter, use `@pytest.mark.usefixtures` instead
  "PT006" # Checks for the type of parameter names passed to pytest.mark.parametrize.
]
"sktime/libs/uni2ts/*.py" = [
  "F722", # Checks for forward annotations that include invalid syntax.
  "F821", # Checks for uses of undefined names.
  "D100", # Missing docstring in public module
  "D101", # Missing docstring in public class
  "D102", # Missing docstring in public method
  "D103", # Missing docstring in public function
  "D104", # Missing docstring in public package
  "D106", # Missing docstring in public nested class
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"
