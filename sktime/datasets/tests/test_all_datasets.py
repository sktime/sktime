"""Unit tests for all time series regressors."""

__author__ = ["mloning", "TonyBagnall", "fkiraly"]


from contextlib import nullcontext

import numpy as np
import pandas as pd
import pytest

from sktime.tests.test_all_estimators import BaseFixtureGenerator, QuickTester

_tag_constraints = [
    (
        "n_instances should be equal to the sum of test and train instances",
        lambda x: x["n_instances"] == x["n_instances_train"] + x["n_instances_test"],
    ),
]


class DatasetFixtureGenerator(BaseFixtureGenerator):
    """Fixture generator for classifier tests.

    Fixtures parameterized
    ----------------------
    estimator_class: estimator inheriting from BaseObject
        ranges over estimator classes not excluded by EXCLUDE_ESTIMATORS, EXCLUDED_TESTS
    estimator_instance: instance of estimator inheriting from BaseObject
        ranges over estimator classes not excluded by EXCLUDE_ESTIMATORS, EXCLUDED_TESTS
        instances are generated by create_test_instance class method
    scenario: instance of TestScenario
        ranges over all scenarios returned by retrieve_scenarios
    """

    # note: this should be separate from TestAllRegressors
    #   additional fixtures, parameters, etc should be added here
    #   TestAllRegressors should contain the tests only

    estimator_type_filter = "dataset"


class TestAllDatasets(DatasetFixtureGenerator, QuickTester):
    """Module level tests for all sktime regressors."""

    @pytest.mark.parametrize("args", [("X",), ("y",), ("X", "y")])
    def test_load_output_type(self, estimator_instance, args):
        output = estimator_instance.load(*args)
        if len(args) == 1:
            assert isinstance(output, (pd.DataFrame, pd.Series, np.ndarray, type(None)))
        else:
            assert isinstance(output, tuple)

    def test_tag_n_instances(self, estimator_instance):
        n_instances = estimator_instance.get_tag("n_instances")
        y = estimator_instance.load("y")
        assert len(y) == n_instances

    def test_tag_n_instances_train(self, estimator_instance):
        n_instances_train = estimator_instance.get_tag("n_instances_train")

        contextwrapper = (
            nullcontext() if n_instances_train > 0 else pytest.raises(ValueError)
        )
        with contextwrapper:
            y_train = estimator_instance.load("y_train")
            assert len(y_train) == n_instances_train

    def test_tag_n_instances_test(self, estimator_instance):
        n_instances_test = estimator_instance.get_tag("n_instances_test")

        contextwrapper = (
            nullcontext() if n_instances_test > 0 else pytest.raises(ValueError)
        )
        with contextwrapper:
            y_test = estimator_instance.load("y_test")
            assert len(y_test) == n_instances_test

    def test_tag_is_univariate(self, estimator_instance):
        expected = estimator_instance.get_tag("is_univariate")
        y = estimator_instance.load("y")

        is_univariate = y.ndim == 1 or y.shape[1] == 1
        assert expected == is_univariate
