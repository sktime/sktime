"""Tests for all sktime forecasting metrics - point forecasts."""

import numpy as np
import pandas as pd
import pytest
from numpy.testing import assert_almost_equal
from sktime.tests.test_all_estimators import BaseFixtureGenerator, QuickTester
from sktime.utils._testing.panel import _make_panel
from sktime.utils._testing.series import _make_series
from sktime.utils.parallel import _get_parallel_test_fixtures
from sktime.performance_metrics.forecasting import (
    MeanAbsolutePercentageError,
    MeanSquaredErrorPercentage,
    MedianAbsolutePercentageError,
    MedianSquaredPercentageError,
)

MULTIOUTPUT = ["uniform_average", "raw_values", "numpy"]

# list of parallelization backends to test
BACKENDS = _get_parallel_test_fixtures("config")


class ForecastingMetricPtFixtureGenerator(BaseFixtureGenerator):
    """Fixture generator for time series forecasting metric tests, point forecasts.

    Fixtures parameterized
    ----------------------
    estimator_class: estimator inheriting from BaseObject
        ranges over estimator classes not excluded by EXCLUDE_ESTIMATORS, EXCLUDED_TESTS
    estimator_instance: instance of estimator inheriting from BaseObject
        ranges over estimator classes not excluded by EXCLUDE_ESTIMATORS, EXCLUDED_TESTS
        instances are generated by create_test_instance class method
    scenario: instance of TestScenario
        ranges over all scenarios returned by retrieve_scenarios
    """

    # note: this should be separate from TestAllForecastingMetricsPt
    #   additional fixtures, parameters, etc should be added here
    #   ForecastingMetricsPt should contain the tests only

    estimator_type_filter = "metric_forecasting"

    fixture_sequence = [
        "estimator_class",
        "estimator_instance",
        "fitted_estimator",
        "scenario",
    ]


def test_mape_relative_to_y_true_and_y_pred():
        """Test MAPE metric with relative_to y_true and y_pred."""

        y_true = np.array([10, 20, 30])
        y_pred = np.array([12, 18, 33])

        mape_ytrue = MeanAbsolutePercentageError(relative_to="y_true")(y_true, y_pred)
        mape_ypred = MeanAbsolutePercentageError(relative_to="y_pred")(y_true, y_pred)

        expected_ytrue = np.mean(np.abs((y_true - y_pred) / y_true)) 
        expected_ypred = np.mean(np.abs((y_true - y_pred) / y_pred)) 

        assert np.isclose(mape_ytrue, expected_ytrue, atol=1e-6), "MAPE relative to y_true incorrect"
        assert np.isclose(mape_ypred, expected_ypred, atol=1e-6), "MAPE relative to y_pred incorrect"

def test_mspe_relative_to_y_true_and_y_pred():
    """Test MSPE metric with relative_to y_true and y_pred.
    
    MSPE = mean squared percentage error, i.e.
    MSPE = mean(((y_true - y_pred)^2) / (y_true^2)) or (y_pred^2)
    """
    y_true = np.array([10, 20, 30])
    y_pred = np.array([12, 18, 33])

    mspe_ytrue = MeanSquaredErrorPercentage(relative_to="y_true")(y_true, y_pred)
    mspe_ypred = MeanSquaredErrorPercentage(relative_to="y_pred")(y_true, y_pred)

    expected_ytrue = np.mean(((y_true - y_pred) / y_true) ** 2)
    expected_ypred = np.mean(((y_true - y_pred) / y_pred) ** 2)
    
    assert np.isclose(mspe_ytrue, expected_ytrue, atol=1e-6), "MSPE relative to y_true incorrect"
    assert np.isclose(mspe_ypred, expected_ypred, atol=1e-6), "MSPE relative to y_pred incorrect"

def test_mspe_raises_on_empty_input():
    """Ensure MSPE raises ValueError on empty inputs."""
    y_true = np.array([])
    y_pred = np.array([])

    with pytest.raises(ValueError, match="empty"):
        MeanSquaredErrorPercentage(relative_to="y_true")(y_true, y_pred)

def test_mdape_relative_to_y_true_and_y_pred():
    """Test MdAPE with relative_to='y_true' and 'y_pred'."""
    y_true = np.array([10, 20, 30])
    y_pred = np.array([12, 18, 33])

    mdape_ytrue = MedianAbsolutePercentageError(relative_to="y_true")(y_true, y_pred)
    mdape_ypred = MedianAbsolutePercentageError(relative_to="y_pred")(y_true, y_pred)

    expected_ytrue = np.median(np.abs((y_true - y_pred) / y_true))
    expected_ypred = np.median(np.abs((y_true - y_pred) / y_pred))

    assert np.isclose(mdape_ytrue, expected_ytrue, atol=1e-6), "MdAPE relative to y_true incorrect"
    assert np.isclose(mdape_ypred, expected_ypred, atol=1e-6), "MdAPE relative to y_pred incorrect"

def test_mdape_symmetric_behavior():
    """Test symmetric MdAPE behaves correctly and ignores relative_to."""
    y_true = np.array([10, 20, 30])
    y_pred = np.array([12, 18, 33])

    symmetric_ytrue = MedianAbsolutePercentageError(symmetric=True, relative_to="y_true")(y_true, y_pred)
    symmetric_ypred = MedianAbsolutePercentageError(symmetric=True, relative_to="y_pred")(y_true, y_pred)

    # Symmetric percentage error formula
    expected_symmetric = np.median(
        2 * np.abs(y_true - y_pred) / (np.abs(y_true) + np.abs(y_pred))
    )

    assert np.isclose(symmetric_ytrue, expected_symmetric, atol=1e-6), "Symmetric MdAPE calculation is incorrect"
    assert np.isclose(symmetric_ypred, expected_symmetric, atol=1e-6), "Symmetric MdAPE should ignore relative_to"

def test_mdape_invalid_relative_to_raises():
    """Ensure MdAPE raises on invalid `relative_to` argument."""
    y_true = np.array([1, 2, 3])
    y_pred = np.array([1, 2, 3])
    
    with pytest.raises(ValueError, match="relative_to must be 'y_true' or 'y_pred'"):
        MedianAbsolutePercentageError(relative_to="invalid")(y_true, y_pred)

def test_mdape_empty_input_raises():
    """Ensure MdAPE raises ValueError when inputs are empty."""
    y_true = np.array([])
    y_pred = np.array([])

    with pytest.raises(ValueError, match="0 sample"):
        MedianAbsolutePercentageError()(y_true, y_pred)

def test_mdape_nan_input_raises():
    y_true = np.array([10, np.nan, 30])
    y_pred = np.array([12, 18, 33])

    with pytest.raises(ValueError, match="contains NaN"):
        MedianAbsolutePercentageError()(y_true, y_pred)

def test_mdspe_relative_to_y_true_and_y_pred():
    """Test MdSPE with relative_to='y_true' and 'y_pred'."""
    y_true = np.array([10, 20, 30])
    y_pred = np.array([12, 18, 33])

    mdspe_ytrue = MedianSquaredPercentageError(relative_to="y_true").evaluate(y_true, y_pred)
    mdspe_ypred = MedianSquaredPercentageError(relative_to="y_pred").evaluate(y_true, y_pred)

    expected_ytrue = np.median(((y_true - y_pred) / y_true) ** 2)
    expected_ypred = np.median(((y_true - y_pred) / y_pred) ** 2)

    assert np.isclose(mdspe_ytrue, expected_ytrue, atol=1e-6), "MdSPE relative to y_true incorrect"
    assert np.isclose(mdspe_ypred, expected_ypred, atol=1e-6), "MdSPE relative to y_pred incorrect"

def test_mdspe_invalid_relative_to_raises():
    """Ensure MdSPE raises on invalid `relative_to` argument."""
    y_true = np.array([1, 2, 3])
    y_pred = np.array([1, 2, 3])

    with pytest.raises(ValueError):
        MedianSquaredPercentageError(relative_to="invalid").evaluate(y_true, y_pred)

def test_mdspe_empty_input_raises():
    """Ensure MdSPE raises ValueError when inputs are empty."""
    y_true = np.array([])
    y_pred = np.array([])

    with pytest.raises(ValueError, match="0 sample"):
        MedianSquaredPercentageError().evaluate(y_true, y_pred)

def test_mdspe_nan_input_raises():
    """Ensure MdSPE raises ValueError when input contains NaN."""
    y_true = np.array([10, np.nan, 30])
    y_pred = np.array([12, 18, 33])

    with pytest.raises(ValueError, match="relative_to.*y_true.*y_pred"):
        MedianSquaredPercentageError(relative_to="invalid").evaluate(y_true, y_pred)

def test_mdspe_symmetric_behavior():
    """Test symmetric MdSPE behaves correctly and ignores relative_to."""
    y_true = np.array([10, 20, 30])
    y_pred = np.array([12, 18, 33])

    symmetric_ytrue = MedianSquaredPercentageError(symmetric=True, relative_to="y_true").evaluate(y_true, y_pred)
    symmetric_ypred = MedianSquaredPercentageError(symmetric=True, relative_to="y_pred").evaluate(y_true, y_pred)

    expected_symmetric = np.median(
        (2 * np.abs(y_true - y_pred) / (np.abs(y_true) + np.abs(y_pred))) ** 2
    )

    assert np.isclose(symmetric_ytrue, expected_symmetric, atol=1e-6), "Symmetric MdSPE calculation is incorrect"
    assert np.isclose(symmetric_ypred, expected_symmetric, atol=1e-6), "Symmetric MdSPE should ignore relative_to"

def test_median_squared_percentage_error_relative_to_pred():
    y_true = np.array([100, 200, 300])
    y_pred = np.array([90, 210, 310])
    metric = MedianSquaredPercentageError(relative_to="y_pred")
    result = metric(y_true, y_pred)

    expected = np.nanmedian(((y_true - y_pred) / y_pred) ** 2)
    assert np.isclose(result, expected, atol=1e-6), "MdSPE relative_to=y_pred incorrect"

class TestAllForecastingPtMetrics(QuickTester):
    """Dummy test class to register point forecasting metrics in registry."""
    pass
